version: "3.8"

services:
  db:
    image: postgres:latest
    restart: always
    volumes:
      - data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 3
  redis:
    image: redis:7.0.2
    restart: always
    container_name: acceleration_program_redis
    volumes:
      - redis_data:/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "6379:6379"
    expose:
      - "6379"
  celery:
    build:
      context: .
    restart: on-failure
    links:
      - redis
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - web_api
    entrypoint: ""
    command: celery -A core worker -l info
  celery-beat:
    build: .
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web_api
      - redis
      - celery
    entrypoint: ""
    command: celery -A core beat --scheduler django_celery_beat.schedulers:DatabaseScheduler -l info
  web_api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    volumes:
      - .:/app
      - ./media:/app/media
    expose:
      - "8000"
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition:
          service_healthy
volumes:
  data:
  redis_data:
